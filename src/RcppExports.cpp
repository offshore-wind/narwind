// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rtnorm
double rtnorm(double location, double scale, double low, double high);
RcppExport SEXP _narwind_rtnorm(SEXP locationSEXP, SEXP scaleSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnorm(location, scale, low, high));
    return rcpp_result_gen;
END_RCPP
}
// estBetaParams
Rcpp::NumericVector estBetaParams(Rcpp::NumericVector mu, Rcpp::NumericVector std);
RcppExport SEXP _narwind_estBetaParams(SEXP muSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(estBetaParams(mu, std));
    return rcpp_result_gen;
END_RCPP
}
// transpose_c
Rcpp::NumericMatrix transpose_c(Rcpp::NumericMatrix m, int k);
RcppExport SEXP _narwind_transpose_c(SEXP mSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(transpose_c(m, k));
    return rcpp_result_gen;
END_RCPP
}
// multinomial
int multinomial(Rcpp::NumericVector probs);
RcppExport SEXP _narwind_multinomial(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(multinomial(probs));
    return rcpp_result_gen;
END_RCPP
}
// random_int
Rcpp::NumericVector random_int(int n, int lwr, int uppr);
RcppExport SEXP _narwind_random_int(SEXP nSEXP, SEXP lwrSEXP, SEXP upprSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< int >::type uppr(upprSEXP);
    rcpp_result_gen = Rcpp::wrap(random_int(n, lwr, uppr));
    return rcpp_result_gen;
END_RCPP
}
// random_multivariate_normal
Rcpp::NumericVector random_multivariate_normal(const Eigen::MatrixXd mu, const Eigen::MatrixXd Sigma);
RcppExport SEXP _narwind_random_multivariate_normal(SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(random_multivariate_normal(mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// prob_migration
Rcpp::NumericVector prob_migration(int n, std::string destination, int cohortID);
RcppExport SEXP _narwind_prob_migration(SEXP nSEXP, SEXP destinationSEXP, SEXP cohortIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type destination(destinationSEXP);
    Rcpp::traits::input_parameter< int >::type cohortID(cohortIDSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_migration(n, destination, cohortID));
    return rcpp_result_gen;
END_RCPP
}
// response_threshold
double response_threshold(Rcpp::NumericVector dose, int day, int simduration, int seed);
RcppExport SEXP _narwind_response_threshold(SEXP doseSEXP, SEXP daySEXP, SEXP simdurationSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dose(doseSEXP);
    Rcpp::traits::input_parameter< int >::type day(daySEXP);
    Rcpp::traits::input_parameter< int >::type simduration(simdurationSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(response_threshold(dose, day, simduration, seed));
    return rcpp_result_gen;
END_RCPP
}
// starvation_mortality
double starvation_mortality(double bc, Rcpp::NumericVector coefs, double starvation_death, double starvation_onset);
RcppExport SEXP _narwind_starvation_mortality(SEXP bcSEXP, SEXP coefsSEXP, SEXP starvation_deathSEXP, SEXP starvation_onsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bc(bcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< double >::type starvation_death(starvation_deathSEXP);
    Rcpp::traits::input_parameter< double >::type starvation_onset(starvation_onsetSEXP);
    rcpp_result_gen = Rcpp::wrap(starvation_mortality(bc, coefs, starvation_death, starvation_onset));
    return rcpp_result_gen;
END_RCPP
}
// starvation_mortality_vec
Rcpp::NumericVector starvation_mortality_vec(Rcpp::NumericVector bc, Rcpp::NumericVector coefs, double starvation_death, double starvation_onset);
RcppExport SEXP _narwind_starvation_mortality_vec(SEXP bcSEXP, SEXP coefsSEXP, SEXP starvation_deathSEXP, SEXP starvation_onsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bc(bcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< double >::type starvation_death(starvation_deathSEXP);
    Rcpp::traits::input_parameter< double >::type starvation_onset(starvation_onsetSEXP);
    rcpp_result_gen = Rcpp::wrap(starvation_mortality_vec(bc, coefs, starvation_death, starvation_onset));
    return rcpp_result_gen;
END_RCPP
}
// is_female
double is_female(int cohort);
RcppExport SEXP _narwind_is_female(SEXP cohortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cohort(cohortSEXP);
    rcpp_result_gen = Rcpp::wrap(is_female(cohort));
    return rcpp_result_gen;
END_RCPP
}
// start_age
double start_age(int cohort);
RcppExport SEXP _narwind_start_age(SEXP cohortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cohort(cohortSEXP);
    rcpp_result_gen = Rcpp::wrap(start_age(cohort));
    return rcpp_result_gen;
END_RCPP
}
// start_age_vec
Rcpp::NumericVector start_age_vec(Rcpp::NumericVector cohort);
RcppExport SEXP _narwind_start_age_vec(SEXP cohortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cohort(cohortSEXP);
    rcpp_result_gen = Rcpp::wrap(start_age_vec(cohort));
    return rcpp_result_gen;
END_RCPP
}
// entanglement_event
Rcpp::NumericVector entanglement_event(double p_entangled, double p_head, Rcpp::NumericVector p_severity);
RcppExport SEXP _narwind_entanglement_event(SEXP p_entangledSEXP, SEXP p_headSEXP, SEXP p_severitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p_entangled(p_entangledSEXP);
    Rcpp::traits::input_parameter< double >::type p_head(p_headSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p_severity(p_severitySEXP);
    rcpp_result_gen = Rcpp::wrap(entanglement_event(p_entangled, p_head, p_severity));
    return rcpp_result_gen;
END_RCPP
}
// start_mouth
double start_mouth(int cohort, double age);
RcppExport SEXP _narwind_start_mouth(SEXP cohortSEXP, SEXP ageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    rcpp_result_gen = Rcpp::wrap(start_mouth(cohort, age));
    return rcpp_result_gen;
END_RCPP
}
// start_bcondition
long double start_bcondition(double cohort);
RcppExport SEXP _narwind_start_bcondition(SEXP cohortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cohort(cohortSEXP);
    rcpp_result_gen = Rcpp::wrap(start_bcondition(cohort));
    return rcpp_result_gen;
END_RCPP
}
// start_bcondition_vec
Rcpp::NumericVector start_bcondition_vec(Rcpp::NumericVector cohort, int month);
RcppExport SEXP _narwind_start_bcondition_vec(SEXP cohortSEXP, SEXP monthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< int >::type month(monthSEXP);
    rcpp_result_gen = Rcpp::wrap(start_bcondition_vec(cohort, month));
    return rcpp_result_gen;
END_RCPP
}
// agL
Eigen::MatrixXd agL(double age, int n, bool sd);
RcppExport SEXP _narwind_agL(SEXP ageSEXP, SEXP nSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(agL(age, n, sd));
    return rcpp_result_gen;
END_RCPP
}
// agL_vec
Eigen::MatrixXd agL_vec(Rcpp::NumericVector age, bool sd);
RcppExport SEXP _narwind_agL_vec(SEXP ageSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(agL_vec(age, sd));
    return rcpp_result_gen;
END_RCPP
}
// age2length
double age2length(double age, Eigen::MatrixXd gompertz);
RcppExport SEXP _narwind_age2length(SEXP ageSEXP, SEXP gompertzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type gompertz(gompertzSEXP);
    rcpp_result_gen = Rcpp::wrap(age2length(age, gompertz));
    return rcpp_result_gen;
END_RCPP
}
// age2length_vec
Rcpp::NumericVector age2length_vec(Rcpp::NumericVector age);
RcppExport SEXP _narwind_age2length_vec(SEXP ageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type age(ageSEXP);
    rcpp_result_gen = Rcpp::wrap(age2length_vec(age));
    return rcpp_result_gen;
END_RCPP
}
// a2l_vec
Rcpp::NumericVector a2l_vec(Rcpp::NumericVector age, Eigen::MatrixXd gompertz);
RcppExport SEXP _narwind_a2l_vec(SEXP ageSEXP, SEXP gompertzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type gompertz(gompertzSEXP);
    rcpp_result_gen = Rcpp::wrap(a2l_vec(age, gompertz));
    return rcpp_result_gen;
END_RCPP
}
// mL
Eigen::MatrixXd mL(int n, bool sd);
RcppExport SEXP _narwind_mL(SEXP nSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(mL(n, sd));
    return rcpp_result_gen;
END_RCPP
}
// length2mass
double length2mass(double L, Eigen::MatrixXd param, double lean);
RcppExport SEXP _narwind_length2mass(SEXP LSEXP, SEXP paramSEXP, SEXP leanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type lean(leanSEXP);
    rcpp_result_gen = Rcpp::wrap(length2mass(L, param, lean));
    return rcpp_result_gen;
END_RCPP
}
// length2mass_vec
Rcpp::NumericVector length2mass_vec(Rcpp::NumericVector L, double lean);
RcppExport SEXP _narwind_length2mass_vec(SEXP LSEXP, SEXP leanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type lean(leanSEXP);
    rcpp_result_gen = Rcpp::wrap(length2mass_vec(L, lean));
    return rcpp_result_gen;
END_RCPP
}
// L2mass_vec
Rcpp::NumericVector L2mass_vec(Rcpp::NumericVector L, Eigen::MatrixXd param, double lean);
RcppExport SEXP _narwind_L2mass_vec(SEXP LSEXP, SEXP paramSEXP, SEXP leanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L(LSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type lean(leanSEXP);
    rcpp_result_gen = Rcpp::wrap(L2mass_vec(L, param, lean));
    return rcpp_result_gen;
END_RCPP
}
// increment_cohort
Rcpp::NumericVector increment_cohort(Rcpp::NumericVector alive, Rcpp::NumericVector cohort, Rcpp::NumericVector age, Rcpp::NumericVector female, Rcpp::NumericVector bc, Rcpp::NumericVector min_bc, Rcpp::NumericVector reprod, double abort);
RcppExport SEXP _narwind_increment_cohort(SEXP aliveSEXP, SEXP cohortSEXP, SEXP ageSEXP, SEXP femaleSEXP, SEXP bcSEXP, SEXP min_bcSEXP, SEXP reprodSEXP, SEXP abortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alive(aliveSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type female(femaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bc(bcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type min_bc(min_bcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type reprod(reprodSEXP);
    Rcpp::traits::input_parameter< double >::type abort(abortSEXP);
    rcpp_result_gen = Rcpp::wrap(increment_cohort(alive, cohort, age, female, bc, min_bc, reprod, abort));
    return rcpp_result_gen;
END_RCPP
}
// feeding_threshold
double feeding_threshold(double min_prey, double prey_concentration);
RcppExport SEXP _narwind_feeding_threshold(SEXP min_preySEXP, SEXP prey_concentrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type min_prey(min_preySEXP);
    Rcpp::traits::input_parameter< double >::type prey_concentration(prey_concentrationSEXP);
    rcpp_result_gen = Rcpp::wrap(feeding_threshold(min_prey, prey_concentration));
    return rcpp_result_gen;
END_RCPP
}
// feeding_threshold_vec
Rcpp::NumericVector feeding_threshold_vec(double min_prey, Rcpp::NumericVector prey_concentration);
RcppExport SEXP _narwind_feeding_threshold_vec(SEXP min_preySEXP, SEXP prey_concentrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type min_prey(min_preySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prey_concentration(prey_concentrationSEXP);
    rcpp_result_gen = Rcpp::wrap(feeding_threshold_vec(min_prey, prey_concentration));
    return rcpp_result_gen;
END_RCPP
}
// feeding_effort
double feeding_effort(double eta, double rho, double bc);
RcppExport SEXP _narwind_feeding_effort(SEXP etaSEXP, SEXP rhoSEXP, SEXP bcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type bc(bcSEXP);
    rcpp_result_gen = Rcpp::wrap(feeding_effort(eta, rho, bc));
    return rcpp_result_gen;
END_RCPP
}
// feeding_effort_vec
Rcpp::NumericVector feeding_effort_vec(double eta, double rho, Rcpp::NumericVector bc);
RcppExport SEXP _narwind_feeding_effort_vec(SEXP etaSEXP, SEXP rhoSEXP, SEXP bcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bc(bcSEXP);
    rcpp_result_gen = Rcpp::wrap(feeding_effort_vec(eta, rho, bc));
    return rcpp_result_gen;
END_RCPP
}
// deg2radians
double deg2radians(double angle);
RcppExport SEXP _narwind_deg2radians(SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(deg2radians(angle));
    return rcpp_result_gen;
END_RCPP
}
// gape_size
double gape_size(double L, double omega, double alpha);
RcppExport SEXP _narwind_gape_size(SEXP LSEXP, SEXP omegaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(gape_size(L, omega, alpha));
    return rcpp_result_gen;
END_RCPP
}
// milk_assimilation
double milk_assimilation(double t, int T_lac, double a, double zeta);
RcppExport SEXP _narwind_milk_assimilation(SEXP tSEXP, SEXP T_lacSEXP, SEXP aSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type T_lac(T_lacSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(milk_assimilation(t, T_lac, a, zeta));
    return rcpp_result_gen;
END_RCPP
}
// milk_assimilation_vec
Rcpp::NumericVector milk_assimilation_vec(Rcpp::NumericVector t, int T_lac, double a, double zeta);
RcppExport SEXP _narwind_milk_assimilation_vec(SEXP tSEXP, SEXP T_lacSEXP, SEXP aSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type T_lac(T_lacSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(milk_assimilation_vec(t, T_lac, a, zeta));
    return rcpp_result_gen;
END_RCPP
}
// milk_supply
double milk_supply(double kappa, double target_condition, double M, double R, double zeta);
RcppExport SEXP _narwind_milk_supply(SEXP kappaSEXP, SEXP target_conditionSEXP, SEXP MSEXP, SEXP RSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type target_condition(target_conditionSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(milk_supply(kappa, target_condition, M, R, zeta));
    return rcpp_result_gen;
END_RCPP
}
// milk_supply_vec
Rcpp::NumericVector milk_supply_vec(double kappa, double target_condition, Rcpp::NumericVector M, Rcpp::NumericVector R, double zeta);
RcppExport SEXP _narwind_milk_supply_vec(SEXP kappaSEXP, SEXP target_conditionSEXP, SEXP MSEXP, SEXP RSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type target_condition(target_conditionSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(milk_supply_vec(kappa, target_condition, M, R, zeta));
    return rcpp_result_gen;
END_RCPP
}
// mammary_mass
double mammary_mass(double M);
RcppExport SEXP _narwind_mammary_mass(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(mammary_mass(M));
    return rcpp_result_gen;
END_RCPP
}
// milk_production
double milk_production(double m);
RcppExport SEXP _narwind_milk_production(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(milk_production(m));
    return rcpp_result_gen;
END_RCPP
}
// RMR
double RMR(double M);
RcppExport SEXP _narwind_RMR(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(RMR(M));
    return rcpp_result_gen;
END_RCPP
}
// locomotor_costs
double locomotor_costs(double mass, double distance, double strokerate_foraging, double strokerate, double glide_foraging, double glide, double t_feed, double t_activ, double scalar);
RcppExport SEXP _narwind_locomotor_costs(SEXP massSEXP, SEXP distanceSEXP, SEXP strokerate_foragingSEXP, SEXP strokerateSEXP, SEXP glide_foragingSEXP, SEXP glideSEXP, SEXP t_feedSEXP, SEXP t_activSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mass(massSEXP);
    Rcpp::traits::input_parameter< double >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< double >::type strokerate_foraging(strokerate_foragingSEXP);
    Rcpp::traits::input_parameter< double >::type strokerate(strokerateSEXP);
    Rcpp::traits::input_parameter< double >::type glide_foraging(glide_foragingSEXP);
    Rcpp::traits::input_parameter< double >::type glide(glideSEXP);
    Rcpp::traits::input_parameter< double >::type t_feed(t_feedSEXP);
    Rcpp::traits::input_parameter< double >::type t_activ(t_activSEXP);
    Rcpp::traits::input_parameter< double >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(locomotor_costs(mass, distance, strokerate_foraging, strokerate, glide_foraging, glide, t_feed, t_activ, scalar));
    return rcpp_result_gen;
END_RCPP
}
// placental_maintenance_vec
Rcpp::NumericVector placental_maintenance_vec(Rcpp::NumericVector G);
RcppExport SEXP _narwind_placental_maintenance_vec(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(placental_maintenance_vec(G));
    return rcpp_result_gen;
END_RCPP
}
// placental_maintenance
double placental_maintenance(double G);
RcppExport SEXP _narwind_placental_maintenance(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(placental_maintenance(G));
    return rcpp_result_gen;
END_RCPP
}
// heat_gestation
double heat_gestation(double birth_mass, double delta_m);
RcppExport SEXP _narwind_heat_gestation(SEXP birth_massSEXP, SEXP delta_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type birth_mass(birth_massSEXP);
    Rcpp::traits::input_parameter< double >::type delta_m(delta_mSEXP);
    rcpp_result_gen = Rcpp::wrap(heat_gestation(birth_mass, delta_m));
    return rcpp_result_gen;
END_RCPP
}
// heat_gestation_vec
Rcpp::NumericVector heat_gestation_vec(double birth_mass, Rcpp::NumericVector delta_m);
RcppExport SEXP _narwind_heat_gestation_vec(SEXP birth_massSEXP, SEXP delta_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type birth_mass(birth_massSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta_m(delta_mSEXP);
    rcpp_result_gen = Rcpp::wrap(heat_gestation_vec(birth_mass, delta_m));
    return rcpp_result_gen;
END_RCPP
}
// fetal_tissue_mass
double fetal_tissue_mass(double P_b, double L);
RcppExport SEXP _narwind_fetal_tissue_mass(SEXP P_bSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type P_b(P_bSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_tissue_mass(P_b, L));
    return rcpp_result_gen;
END_RCPP
}
// fetal_tissue_mass_vec
Rcpp::NumericVector fetal_tissue_mass_vec(double P_b, Rcpp::NumericVector L);
RcppExport SEXP _narwind_fetal_tissue_mass_vec(SEXP P_bSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type P_b(P_bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_tissue_mass_vec(P_b, L));
    return rcpp_result_gen;
END_RCPP
}
// fetal_blubber_mass
double fetal_blubber_mass(double L, double BC, double M_muscle, double M_viscera, double M_bones, double D_blubber, double D_muscle, double D_viscera, double D_bones);
RcppExport SEXP _narwind_fetal_blubber_mass(SEXP LSEXP, SEXP BCSEXP, SEXP M_muscleSEXP, SEXP M_visceraSEXP, SEXP M_bonesSEXP, SEXP D_blubberSEXP, SEXP D_muscleSEXP, SEXP D_visceraSEXP, SEXP D_bonesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type BC(BCSEXP);
    Rcpp::traits::input_parameter< double >::type M_muscle(M_muscleSEXP);
    Rcpp::traits::input_parameter< double >::type M_viscera(M_visceraSEXP);
    Rcpp::traits::input_parameter< double >::type M_bones(M_bonesSEXP);
    Rcpp::traits::input_parameter< double >::type D_blubber(D_blubberSEXP);
    Rcpp::traits::input_parameter< double >::type D_muscle(D_muscleSEXP);
    Rcpp::traits::input_parameter< double >::type D_viscera(D_visceraSEXP);
    Rcpp::traits::input_parameter< double >::type D_bones(D_bonesSEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_blubber_mass(L, BC, M_muscle, M_viscera, M_bones, D_blubber, D_muscle, D_viscera, D_bones));
    return rcpp_result_gen;
END_RCPP
}
// fetal_blubber_mass_vec
Rcpp::NumericVector fetal_blubber_mass_vec(Rcpp::NumericVector L, double BC, Rcpp::NumericVector M_muscle, Rcpp::NumericVector M_viscera, Rcpp::NumericVector M_bones, double D_blubber, double D_muscle, double D_viscera, double D_bones);
RcppExport SEXP _narwind_fetal_blubber_mass_vec(SEXP LSEXP, SEXP BCSEXP, SEXP M_muscleSEXP, SEXP M_visceraSEXP, SEXP M_bonesSEXP, SEXP D_blubberSEXP, SEXP D_muscleSEXP, SEXP D_visceraSEXP, SEXP D_bonesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type BC(BCSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type M_muscle(M_muscleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type M_viscera(M_visceraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type M_bones(M_bonesSEXP);
    Rcpp::traits::input_parameter< double >::type D_blubber(D_blubberSEXP);
    Rcpp::traits::input_parameter< double >::type D_muscle(D_muscleSEXP);
    Rcpp::traits::input_parameter< double >::type D_viscera(D_visceraSEXP);
    Rcpp::traits::input_parameter< double >::type D_bones(D_bonesSEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_blubber_mass_vec(L, BC, M_muscle, M_viscera, M_bones, D_blubber, D_muscle, D_viscera, D_bones));
    return rcpp_result_gen;
END_RCPP
}
// fetal_mass
double fetal_mass(int days_to_birth, double mother_length, int bbc, double body_density);
RcppExport SEXP _narwind_fetal_mass(SEXP days_to_birthSEXP, SEXP mother_lengthSEXP, SEXP bbcSEXP, SEXP body_densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type days_to_birth(days_to_birthSEXP);
    Rcpp::traits::input_parameter< double >::type mother_length(mother_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type bbc(bbcSEXP);
    Rcpp::traits::input_parameter< double >::type body_density(body_densitySEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_mass(days_to_birth, mother_length, bbc, body_density));
    return rcpp_result_gen;
END_RCPP
}
// fetal_mass_vec
Rcpp::NumericVector fetal_mass_vec(Rcpp::NumericVector days_to_birth, Rcpp::NumericVector mother_length, int bbc, double body_density);
RcppExport SEXP _narwind_fetal_mass_vec(SEXP days_to_birthSEXP, SEXP mother_lengthSEXP, SEXP bbcSEXP, SEXP body_densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type days_to_birth(days_to_birthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mother_length(mother_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type bbc(bbcSEXP);
    Rcpp::traits::input_parameter< double >::type body_density(body_densitySEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_mass_vec(days_to_birth, mother_length, bbc, body_density));
    return rcpp_result_gen;
END_RCPP
}
// fetal_length
double fetal_length(int days_to_birth, double mother_length);
RcppExport SEXP _narwind_fetal_length(SEXP days_to_birthSEXP, SEXP mother_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type days_to_birth(days_to_birthSEXP);
    Rcpp::traits::input_parameter< double >::type mother_length(mother_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_length(days_to_birth, mother_length));
    return rcpp_result_gen;
END_RCPP
}
// fetal_length_vec
Rcpp::NumericVector fetal_length_vec(Rcpp::NumericVector days_to_birth, Rcpp::NumericVector mother_length);
RcppExport SEXP _narwind_fetal_length_vec(SEXP days_to_birthSEXP, SEXP mother_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type days_to_birth(days_to_birthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mother_length(mother_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(fetal_length_vec(days_to_birth, mother_length));
    return rcpp_result_gen;
END_RCPP
}
// growth_cost
double growth_cost(double leanmass_increment, double EDens_lipids, double EDens_protein, double lipid_in_muscle, double lipid_in_viscera, double lipid_in_bones, double protein_in_muscle, double protein_in_viscera, double protein_in_bones, double prop_muscle, double prop_viscera, double prop_bones);
RcppExport SEXP _narwind_growth_cost(SEXP leanmass_incrementSEXP, SEXP EDens_lipidsSEXP, SEXP EDens_proteinSEXP, SEXP lipid_in_muscleSEXP, SEXP lipid_in_visceraSEXP, SEXP lipid_in_bonesSEXP, SEXP protein_in_muscleSEXP, SEXP protein_in_visceraSEXP, SEXP protein_in_bonesSEXP, SEXP prop_muscleSEXP, SEXP prop_visceraSEXP, SEXP prop_bonesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type leanmass_increment(leanmass_incrementSEXP);
    Rcpp::traits::input_parameter< double >::type EDens_lipids(EDens_lipidsSEXP);
    Rcpp::traits::input_parameter< double >::type EDens_protein(EDens_proteinSEXP);
    Rcpp::traits::input_parameter< double >::type lipid_in_muscle(lipid_in_muscleSEXP);
    Rcpp::traits::input_parameter< double >::type lipid_in_viscera(lipid_in_visceraSEXP);
    Rcpp::traits::input_parameter< double >::type lipid_in_bones(lipid_in_bonesSEXP);
    Rcpp::traits::input_parameter< double >::type protein_in_muscle(protein_in_muscleSEXP);
    Rcpp::traits::input_parameter< double >::type protein_in_viscera(protein_in_visceraSEXP);
    Rcpp::traits::input_parameter< double >::type protein_in_bones(protein_in_bonesSEXP);
    Rcpp::traits::input_parameter< double >::type prop_muscle(prop_muscleSEXP);
    Rcpp::traits::input_parameter< double >::type prop_viscera(prop_visceraSEXP);
    Rcpp::traits::input_parameter< double >::type prop_bones(prop_bonesSEXP);
    rcpp_result_gen = Rcpp::wrap(growth_cost(leanmass_increment, EDens_lipids, EDens_protein, lipid_in_muscle, lipid_in_viscera, lipid_in_bones, protein_in_muscle, protein_in_viscera, protein_in_bones, prop_muscle, prop_viscera, prop_bones));
    return rcpp_result_gen;
END_RCPP
}
// add_calf
Rcpp::NumericMatrix add_calf(int n, Rcpp::StringVector attr, Rcpp::NumericVector sex, Rcpp::NumericVector nonreprod, Rcpp::NumericVector BC, Rcpp::NumericVector psurv);
RcppExport SEXP _narwind_add_calf(SEXP nSEXP, SEXP attrSEXP, SEXP sexSEXP, SEXP nonreprodSEXP, SEXP BCSEXP, SEXP psurvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nonreprod(nonreprodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type BC(BCSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psurv(psurvSEXP);
    rcpp_result_gen = Rcpp::wrap(add_calf(n, attr, sex, nonreprod, BC, psurv));
    return rcpp_result_gen;
END_RCPP
}
// pleave
double pleave(int now, int enter, int cohortID, double factor, Rcpp::NumericMatrix resid);
RcppExport SEXP _narwind_pleave(SEXP nowSEXP, SEXP enterSEXP, SEXP cohortIDSEXP, SEXP factorSEXP, SEXP residSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type now(nowSEXP);
    Rcpp::traits::input_parameter< int >::type enter(enterSEXP);
    Rcpp::traits::input_parameter< int >::type cohortID(cohortIDSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type resid(residSEXP);
    rcpp_result_gen = Rcpp::wrap(pleave(now, enter, cohortID, factor, resid));
    return rcpp_result_gen;
END_RCPP
}
// entanglement_effect
double entanglement_effect(double prob_survival, int severity, int ndays, Rcpp::NumericVector entgl_hit);
RcppExport SEXP _narwind_entanglement_effect(SEXP prob_survivalSEXP, SEXP severitySEXP, SEXP ndaysSEXP, SEXP entgl_hitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type prob_survival(prob_survivalSEXP);
    Rcpp::traits::input_parameter< int >::type severity(severitySEXP);
    Rcpp::traits::input_parameter< int >::type ndays(ndaysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type entgl_hit(entgl_hitSEXP);
    rcpp_result_gen = Rcpp::wrap(entanglement_effect(prob_survival, severity, ndays, entgl_hit));
    return rcpp_result_gen;
END_RCPP
}
// survival
double survival(double age, int regime, int female);
RcppExport SEXP _narwind_survival(SEXP ageSEXP, SEXP regimeSEXP, SEXP femaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type regime(regimeSEXP);
    Rcpp::traits::input_parameter< int >::type female(femaleSEXP);
    rcpp_result_gen = Rcpp::wrap(survival(age, regime, female));
    return rcpp_result_gen;
END_RCPP
}
// clamp
Rcpp::NumericVector clamp(Rcpp::NumericVector v, double threshold);
RcppExport SEXP _narwind_clamp(SEXP vSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(clamp(v, threshold));
    return rcpp_result_gen;
END_RCPP
}
// create_hash
std::int64_t create_hash(double x0, double y0, double x1, double y1);
RcppExport SEXP _narwind_create_hash(SEXP x0SEXP, SEXP y0SEXP, SEXP x1SEXP, SEXP y1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    rcpp_result_gen = Rcpp::wrap(create_hash(x0, y0, x1, y1));
    return rcpp_result_gen;
END_RCPP
}
// geoD
int geoD(Eigen::MatrixXd mat, double x0, double y0, double x1, double y1, Eigen::VectorXd limits, Eigen::VectorXd resolution);
RcppExport SEXP _narwind_geoD(SEXP matSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP limitsSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(geoD(mat, x0, y0, x1, y1, limits, resolution));
    return rcpp_result_gen;
END_RCPP
}
// geoDist
int geoDist(Eigen::MatrixXd mat, double x0, double y0, double x1, double y1, Eigen::VectorXd limits, Eigen::VectorXd resolution, int r);
RcppExport SEXP _narwind_geoDist(SEXP matSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP limitsSEXP, SEXP resolutionSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(geoDist(mat, x0, y0, x1, y1, limits, resolution, r));
    return rcpp_result_gen;
END_RCPP
}
// NARW_simulator
Rcpp::List NARW_simulator(int cohortID, Rcpp::NumericVector seus, Rcpp::NumericVector gsl, Eigen::MatrixXd support, std::vector<Eigen::MatrixXd> densities, std::vector<Eigen::MatrixXd> densities_seus, std::vector<Eigen::MatrixXd> densities_gsl, std::vector<Eigen::MatrixXd> densities_gom, std::vector<std::size_t> densitySeq, std::vector<Eigen::MatrixXd> prey, std::vector<Eigen::MatrixXd> fishing, std::vector<Eigen::MatrixXd> vessels, std::vector<Eigen::MatrixXd> noise, Rcpp::NumericMatrix doseresp_seed, Rcpp::NumericVector doseresp, Eigen::MatrixXd regions, Eigen::VectorXd limits, Eigen::VectorXd limits_regions, Eigen::VectorXd limits_prey, Eigen::VectorXd limits_fishing, Eigen::VectorXd limits_vessels, Eigen::VectorXd limits_noise, Eigen::VectorXd resolution, Eigen::VectorXd resolution_regions, Eigen::VectorXd resolution_prey, Eigen::VectorXd resolution_fishing, Eigen::VectorXd resolution_vessels, Eigen::VectorXd resolution_noise, std::size_t M, Eigen::MatrixXd xinit, Eigen::MatrixXd yinit, bool stressors, bool growth, double prey_scale, Rcpp::NumericVector starvation_coefs, double starvation_death, double starvation_onset, Rcpp::NumericVector nursing_cessation, double piling_hrs, bool progress);
RcppExport SEXP _narwind_NARW_simulator(SEXP cohortIDSEXP, SEXP seusSEXP, SEXP gslSEXP, SEXP supportSEXP, SEXP densitiesSEXP, SEXP densities_seusSEXP, SEXP densities_gslSEXP, SEXP densities_gomSEXP, SEXP densitySeqSEXP, SEXP preySEXP, SEXP fishingSEXP, SEXP vesselsSEXP, SEXP noiseSEXP, SEXP doseresp_seedSEXP, SEXP doserespSEXP, SEXP regionsSEXP, SEXP limitsSEXP, SEXP limits_regionsSEXP, SEXP limits_preySEXP, SEXP limits_fishingSEXP, SEXP limits_vesselsSEXP, SEXP limits_noiseSEXP, SEXP resolutionSEXP, SEXP resolution_regionsSEXP, SEXP resolution_preySEXP, SEXP resolution_fishingSEXP, SEXP resolution_vesselsSEXP, SEXP resolution_noiseSEXP, SEXP MSEXP, SEXP xinitSEXP, SEXP yinitSEXP, SEXP stressorsSEXP, SEXP growthSEXP, SEXP prey_scaleSEXP, SEXP starvation_coefsSEXP, SEXP starvation_deathSEXP, SEXP starvation_onsetSEXP, SEXP nursing_cessationSEXP, SEXP piling_hrsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cohortID(cohortIDSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type seus(seusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gsl(gslSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type support(supportSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type densities(densitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type densities_seus(densities_seusSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type densities_gsl(densities_gslSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type densities_gom(densities_gomSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type densitySeq(densitySeqSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type prey(preySEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type fishing(fishingSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type vessels(vesselsSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type doseresp_seed(doseresp_seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type doseresp(doserespSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_regions(limits_regionsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_prey(limits_preySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_fishing(limits_fishingSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_vessels(limits_vesselsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_noise(limits_noiseSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_regions(resolution_regionsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_prey(resolution_preySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_fishing(resolution_fishingSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_vessels(resolution_vesselsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_noise(resolution_noiseSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type xinit(xinitSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type yinit(yinitSEXP);
    Rcpp::traits::input_parameter< bool >::type stressors(stressorsSEXP);
    Rcpp::traits::input_parameter< bool >::type growth(growthSEXP);
    Rcpp::traits::input_parameter< double >::type prey_scale(prey_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type starvation_coefs(starvation_coefsSEXP);
    Rcpp::traits::input_parameter< double >::type starvation_death(starvation_deathSEXP);
    Rcpp::traits::input_parameter< double >::type starvation_onset(starvation_onsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nursing_cessation(nursing_cessationSEXP);
    Rcpp::traits::input_parameter< double >::type piling_hrs(piling_hrsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(NARW_simulator(cohortID, seus, gsl, support, densities, densities_seus, densities_gsl, densities_gom, densitySeq, prey, fishing, vessels, noise, doseresp_seed, doseresp, regions, limits, limits_regions, limits_prey, limits_fishing, limits_vessels, limits_noise, resolution, resolution_regions, resolution_prey, resolution_fishing, resolution_vessels, resolution_noise, M, xinit, yinit, stressors, growth, prey_scale, starvation_coefs, starvation_death, starvation_onset, nursing_cessation, piling_hrs, progress));
    return rcpp_result_gen;
END_RCPP
}
// evalEnvironment
double evalEnvironment(Eigen::MatrixXd density, Eigen::MatrixXd density_seus, Eigen::MatrixXd density_gsl, Eigen::MatrixXd density_gom, Eigen::MatrixXd prey, Eigen::MatrixXd fishing, Eigen::MatrixXd vessels, Eigen::MatrixXd noise, Eigen::MatrixXd regions, Eigen::VectorXd limits, Eigen::VectorXd limits_regions, Eigen::VectorXd limits_prey, Eigen::VectorXd limits_fishing, Eigen::VectorXd limits_vessels, Eigen::VectorXd limits_noise, Eigen::VectorXd resolution, Eigen::VectorXd resolution_regions, Eigen::VectorXd resolution_prey, Eigen::VectorXd resolution_fishing, Eigen::VectorXd resolution_vessels, Eigen::VectorXd resolution_noise, double x, double y, char layer);
RcppExport SEXP _narwind_evalEnvironment(SEXP densitySEXP, SEXP density_seusSEXP, SEXP density_gslSEXP, SEXP density_gomSEXP, SEXP preySEXP, SEXP fishingSEXP, SEXP vesselsSEXP, SEXP noiseSEXP, SEXP regionsSEXP, SEXP limitsSEXP, SEXP limits_regionsSEXP, SEXP limits_preySEXP, SEXP limits_fishingSEXP, SEXP limits_vesselsSEXP, SEXP limits_noiseSEXP, SEXP resolutionSEXP, SEXP resolution_regionsSEXP, SEXP resolution_preySEXP, SEXP resolution_fishingSEXP, SEXP resolution_vesselsSEXP, SEXP resolution_noiseSEXP, SEXP xSEXP, SEXP ySEXP, SEXP layerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type density(densitySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type density_seus(density_seusSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type density_gsl(density_gslSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type density_gom(density_gomSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type prey(preySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type fishing(fishingSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vessels(vesselsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_regions(limits_regionsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_prey(limits_preySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_fishing(limits_fishingSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_vessels(limits_vesselsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits_noise(limits_noiseSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_regions(resolution_regionsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_prey(resolution_preySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_fishing(resolution_fishingSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_vessels(resolution_vesselsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution_noise(resolution_noiseSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< char >::type layer(layerSEXP);
    rcpp_result_gen = Rcpp::wrap(evalEnvironment(density, density_seus, density_gsl, density_gom, prey, fishing, vessels, noise, regions, limits, limits_regions, limits_prey, limits_fishing, limits_vessels, limits_noise, resolution, resolution_regions, resolution_prey, resolution_fishing, resolution_vessels, resolution_noise, x, y, layer));
    return rcpp_result_gen;
END_RCPP
}
// cpp_runif
Rcpp::NumericVector cpp_runif(int n);
RcppExport SEXP _narwind_cpp_runif(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_runif(n));
    return rcpp_result_gen;
END_RCPP
}
// mean_rcpp
double mean_rcpp(Rcpp::NumericVector x);
RcppExport SEXP _narwind_mean_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_narwind_rtnorm", (DL_FUNC) &_narwind_rtnorm, 4},
    {"_narwind_estBetaParams", (DL_FUNC) &_narwind_estBetaParams, 2},
    {"_narwind_transpose_c", (DL_FUNC) &_narwind_transpose_c, 2},
    {"_narwind_multinomial", (DL_FUNC) &_narwind_multinomial, 1},
    {"_narwind_random_int", (DL_FUNC) &_narwind_random_int, 3},
    {"_narwind_random_multivariate_normal", (DL_FUNC) &_narwind_random_multivariate_normal, 2},
    {"_narwind_prob_migration", (DL_FUNC) &_narwind_prob_migration, 3},
    {"_narwind_response_threshold", (DL_FUNC) &_narwind_response_threshold, 4},
    {"_narwind_starvation_mortality", (DL_FUNC) &_narwind_starvation_mortality, 4},
    {"_narwind_starvation_mortality_vec", (DL_FUNC) &_narwind_starvation_mortality_vec, 4},
    {"_narwind_is_female", (DL_FUNC) &_narwind_is_female, 1},
    {"_narwind_start_age", (DL_FUNC) &_narwind_start_age, 1},
    {"_narwind_start_age_vec", (DL_FUNC) &_narwind_start_age_vec, 1},
    {"_narwind_entanglement_event", (DL_FUNC) &_narwind_entanglement_event, 3},
    {"_narwind_start_mouth", (DL_FUNC) &_narwind_start_mouth, 2},
    {"_narwind_start_bcondition", (DL_FUNC) &_narwind_start_bcondition, 1},
    {"_narwind_start_bcondition_vec", (DL_FUNC) &_narwind_start_bcondition_vec, 2},
    {"_narwind_agL", (DL_FUNC) &_narwind_agL, 3},
    {"_narwind_agL_vec", (DL_FUNC) &_narwind_agL_vec, 2},
    {"_narwind_age2length", (DL_FUNC) &_narwind_age2length, 2},
    {"_narwind_age2length_vec", (DL_FUNC) &_narwind_age2length_vec, 1},
    {"_narwind_a2l_vec", (DL_FUNC) &_narwind_a2l_vec, 2},
    {"_narwind_mL", (DL_FUNC) &_narwind_mL, 2},
    {"_narwind_length2mass", (DL_FUNC) &_narwind_length2mass, 3},
    {"_narwind_length2mass_vec", (DL_FUNC) &_narwind_length2mass_vec, 2},
    {"_narwind_L2mass_vec", (DL_FUNC) &_narwind_L2mass_vec, 3},
    {"_narwind_increment_cohort", (DL_FUNC) &_narwind_increment_cohort, 8},
    {"_narwind_feeding_threshold", (DL_FUNC) &_narwind_feeding_threshold, 2},
    {"_narwind_feeding_threshold_vec", (DL_FUNC) &_narwind_feeding_threshold_vec, 2},
    {"_narwind_feeding_effort", (DL_FUNC) &_narwind_feeding_effort, 3},
    {"_narwind_feeding_effort_vec", (DL_FUNC) &_narwind_feeding_effort_vec, 3},
    {"_narwind_deg2radians", (DL_FUNC) &_narwind_deg2radians, 1},
    {"_narwind_gape_size", (DL_FUNC) &_narwind_gape_size, 3},
    {"_narwind_milk_assimilation", (DL_FUNC) &_narwind_milk_assimilation, 4},
    {"_narwind_milk_assimilation_vec", (DL_FUNC) &_narwind_milk_assimilation_vec, 4},
    {"_narwind_milk_supply", (DL_FUNC) &_narwind_milk_supply, 5},
    {"_narwind_milk_supply_vec", (DL_FUNC) &_narwind_milk_supply_vec, 5},
    {"_narwind_mammary_mass", (DL_FUNC) &_narwind_mammary_mass, 1},
    {"_narwind_milk_production", (DL_FUNC) &_narwind_milk_production, 1},
    {"_narwind_RMR", (DL_FUNC) &_narwind_RMR, 1},
    {"_narwind_locomotor_costs", (DL_FUNC) &_narwind_locomotor_costs, 9},
    {"_narwind_placental_maintenance_vec", (DL_FUNC) &_narwind_placental_maintenance_vec, 1},
    {"_narwind_placental_maintenance", (DL_FUNC) &_narwind_placental_maintenance, 1},
    {"_narwind_heat_gestation", (DL_FUNC) &_narwind_heat_gestation, 2},
    {"_narwind_heat_gestation_vec", (DL_FUNC) &_narwind_heat_gestation_vec, 2},
    {"_narwind_fetal_tissue_mass", (DL_FUNC) &_narwind_fetal_tissue_mass, 2},
    {"_narwind_fetal_tissue_mass_vec", (DL_FUNC) &_narwind_fetal_tissue_mass_vec, 2},
    {"_narwind_fetal_blubber_mass", (DL_FUNC) &_narwind_fetal_blubber_mass, 9},
    {"_narwind_fetal_blubber_mass_vec", (DL_FUNC) &_narwind_fetal_blubber_mass_vec, 9},
    {"_narwind_fetal_mass", (DL_FUNC) &_narwind_fetal_mass, 4},
    {"_narwind_fetal_mass_vec", (DL_FUNC) &_narwind_fetal_mass_vec, 4},
    {"_narwind_fetal_length", (DL_FUNC) &_narwind_fetal_length, 2},
    {"_narwind_fetal_length_vec", (DL_FUNC) &_narwind_fetal_length_vec, 2},
    {"_narwind_growth_cost", (DL_FUNC) &_narwind_growth_cost, 12},
    {"_narwind_add_calf", (DL_FUNC) &_narwind_add_calf, 6},
    {"_narwind_pleave", (DL_FUNC) &_narwind_pleave, 5},
    {"_narwind_entanglement_effect", (DL_FUNC) &_narwind_entanglement_effect, 4},
    {"_narwind_survival", (DL_FUNC) &_narwind_survival, 3},
    {"_narwind_clamp", (DL_FUNC) &_narwind_clamp, 2},
    {"_narwind_create_hash", (DL_FUNC) &_narwind_create_hash, 4},
    {"_narwind_geoD", (DL_FUNC) &_narwind_geoD, 7},
    {"_narwind_geoDist", (DL_FUNC) &_narwind_geoDist, 8},
    {"_narwind_NARW_simulator", (DL_FUNC) &_narwind_NARW_simulator, 40},
    {"_narwind_evalEnvironment", (DL_FUNC) &_narwind_evalEnvironment, 24},
    {"_narwind_cpp_runif", (DL_FUNC) &_narwind_cpp_runif, 1},
    {"_narwind_mean_rcpp", (DL_FUNC) &_narwind_mean_rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_narwind(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
