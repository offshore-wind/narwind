// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simBasic
Rcpp::NumericVector simBasic(std::size_t t, std::size_t n, Eigen::MatrixXd cov1, Eigen::MatrixXd cov2, Eigen::VectorXd beta, Eigen::VectorXd lim, Eigen::VectorXd res, double allr);
RcppExport SEXP _narwind_simBasic(SEXP tSEXP, SEXP nSEXP, SEXP cov1SEXP, SEXP cov2SEXP, SEXP betaSEXP, SEXP limSEXP, SEXP resSEXP, SEXP allrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type cov1(cov1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type cov2(cov2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lim(limSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type allr(allrSEXP);
    rcpp_result_gen = Rcpp::wrap(simBasic(t, n, cov1, cov2, beta, lim, res, allr));
    return rcpp_result_gen;
END_RCPP
}
// simAnnual
Rcpp::NumericVector simAnnual(std::vector<Eigen::MatrixXd> densities, std::vector<std::size_t> densitySeq, Eigen::VectorXd limits, Eigen::VectorXd resolution, std::size_t M, double stepsize, std::vector<double> xinit, std::vector<double> yinit);
RcppExport SEXP _narwind_simAnnual(SEXP densitiesSEXP, SEXP densitySeqSEXP, SEXP limitsSEXP, SEXP resolutionSEXP, SEXP MSEXP, SEXP stepsizeSEXP, SEXP xinitSEXP, SEXP yinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type densities(densitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type densitySeq(densitySeqSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type xinit(xinitSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type yinit(yinitSEXP);
    rcpp_result_gen = Rcpp::wrap(simAnnual(densities, densitySeq, limits, resolution, M, stepsize, xinit, yinit));
    return rcpp_result_gen;
END_RCPP
}
// simAnnualCoupled
Rcpp::NumericVector simAnnualCoupled(std::vector<Eigen::MatrixXd> densities, std::vector<std::size_t> densitySeq, std::vector<std::size_t> latentDensitySeq, Eigen::VectorXd limits, Eigen::VectorXd resolution, std::size_t M, double stepsize, Eigen::MatrixXd xinit, Eigen::MatrixXd yinit);
RcppExport SEXP _narwind_simAnnualCoupled(SEXP densitiesSEXP, SEXP densitySeqSEXP, SEXP latentDensitySeqSEXP, SEXP limitsSEXP, SEXP resolutionSEXP, SEXP MSEXP, SEXP stepsizeSEXP, SEXP xinitSEXP, SEXP yinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Eigen::MatrixXd> >::type densities(densitiesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type densitySeq(densitySeqSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type latentDensitySeq(latentDensitySeqSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type xinit(xinitSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type yinit(yinitSEXP);
    rcpp_result_gen = Rcpp::wrap(simAnnualCoupled(densities, densitySeq, latentDensitySeq, limits, resolution, M, stepsize, xinit, yinit));
    return rcpp_result_gen;
END_RCPP
}
// evalEnvironment
double evalEnvironment(Eigen::MatrixXd density, Eigen::VectorXd limits, Eigen::VectorXd resolution, double x, double y);
RcppExport SEXP _narwind_evalEnvironment(SEXP densitySEXP, SEXP limitsSEXP, SEXP resolutionSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type density(densitySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(evalEnvironment(density, limits, resolution, x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_narwind_simBasic", (DL_FUNC) &_narwind_simBasic, 8},
    {"_narwind_simAnnual", (DL_FUNC) &_narwind_simAnnual, 8},
    {"_narwind_simAnnualCoupled", (DL_FUNC) &_narwind_simAnnualCoupled, 9},
    {"_narwind_evalEnvironment", (DL_FUNC) &_narwind_evalEnvironment, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_narwind(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
